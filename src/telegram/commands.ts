import { Markup, Telegraf } from 'telegraf';
import type { Context } from 'telegraf';
import { profileService } from '../services/profile.service';
import { kb } from './keyboards';
import { templates } from '../domain/templates';
import { cfg } from '../core/config';

const miniAppReminder = () => {
  const url = cfg.webAppUrl;
  if (!url) {
    return '–ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-—ç–ø–ø, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.';
  }
  return [
    '–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-—ç–ø–ø, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, —É–≤–∏–¥–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ—Ä–∞—Ü–∏–∏.',
    '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-—ç–ø–ø¬ª.'
  ].join('\n');
};

const sendMainMenu = async (ctx: Context, text: string) => {
  const tgId = ctx.from?.id;
  const profile = tgId ? await profileService.get(tgId) : null;
  await ctx.reply(text, kb.main({ hasProfile: Boolean(profile), webAppUrl: cfg.webAppUrl }));
};

const sendProfileStatus = async (ctx: Context) => {
  const tgId = ctx.from?.id;
  if (!tgId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.');
    return;
  }
  const profile = await profileService.get(tgId);
  if (!profile) {
    const inlineApp = kb.inlineApp(cfg.webAppUrl);
    await ctx.reply(miniAppReminder(), inlineApp ? inlineApp : undefined);
    return;
  }
  const inlineApp = kb.inlineApp(cfg.webAppUrl);
  const introExtra = {
    disable_notification: true,
    ...(inlineApp ? { reply_markup: inlineApp.reply_markup } : {})
  };
  await ctx.reply('–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≤ –º–∏–Ω–∏-—ç–ø–ø–µ:', introExtra);
  await ctx.reply(templates.profilePreview(profile), {
    parse_mode: 'MarkdownV2',
    link_preview_options: { is_disabled: true },
    ...(inlineApp ? { reply_markup: inlineApp.reply_markup } : {})
  });
};

const sendListingsHint = async (ctx: Context) => {
  const inlineApp = kb.inlineApp(cfg.webAppUrl);
  const lines = [
    '–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –º–∏–Ω–∏-—ç–ø–ø–µ.',
    '–¢–∞–º –∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.'
  ];
  await ctx.reply(lines.join('\n'), inlineApp ? inlineApp : undefined);
};

const sendSupport = async (ctx: Context) => {
  const lines = [
    '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º: @flatswithcats_support',
    cfg.channelInviteLink ? `–ß–∞—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${cfg.channelInviteLink}` : null
  ].filter(Boolean);
  await ctx.reply(lines.join('\n'));
};

export const registerCommands = (bot: Telegraf<Context>) => {
  bot.start(async (ctx) => {
    const tgId = ctx.from?.id;
    const profile = tgId ? await profileService.get(tgId) : null;
    if (profile) {
      await ctx.reply('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ –º–∏–Ω–∏-—ç–ø–ø–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç—É—Å.', kb.main({ hasProfile: true, webAppUrl: cfg.webAppUrl }));
      return;
    }
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ú–∏–Ω–∏-—ç–ø–ø –ø–æ–º–æ–∂–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.', kb.main({ hasProfile: false, webAppUrl: cfg.webAppUrl }));
    if (cfg.webAppUrl) {
      await ctx.reply('–ù–∞–∂–º–∏ ¬´üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-—ç–ø–ø¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.', Markup.inlineKeyboard([Markup.button.webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-—ç–ø–ø', cfg.webAppUrl)]));
    }
  });

  bot.command('menu', async (ctx) => sendMainMenu(ctx, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'));
  bot.command('status', sendProfileStatus);

  bot.hears('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => sendMainMenu(ctx, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'));
  bot.hears('‚ÑπÔ∏è –ö–∞–∫ –Ω–∞—á–∞—Ç—å', async (ctx) => {
    const inlineApp = kb.inlineApp(cfg.webAppUrl);
    await ctx.reply(miniAppReminder(), inlineApp ? inlineApp : undefined);
  });
  bot.hears('‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', sendProfileStatus);
  bot.hears('üì¢ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', sendListingsHint);
  bot.hears('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', sendSupport);
};

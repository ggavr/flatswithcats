import { Scenes } from 'telegraf';
import { profileService } from '../../services/profile.service';
import { publishService } from '../../services/publish.service';
import { cfg } from '../../core/config';
import { kb } from '../keyboards';
import { templates } from '../../domain/templates';

interface RegistrationState extends Scenes.WizardSessionData {
  name?: string;
  location?: string;
  intro?: string;
  catName?: string;
  catPhotoId?: string;
  profileId?: string;
}

type RegistrationCtx = Scenes.WizardContext<RegistrationState>;

const CANCEL = '–æ—Ç–º–µ–Ω–∞';
const JOIN_CHAT = 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É';
const CREATE_LISTING = 'üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ';
const EDIT_PROFILE = '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É';
const FINAL_STEP_INDEX = 6;

const getText = (ctx: RegistrationCtx) => {
  if ('message' in ctx && ctx.message && 'text' in ctx.message) {
    return ctx.message.text.trim();
  }
  return null;
};

const resetToStart = async (ctx: RegistrationCtx) => {
  await ctx.reply('–ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞.', kb.main(false));
  return ctx.scene.reenter();
};

const saveProfileAndShowPreview = async (ctx: RegistrationCtx, state: RegistrationState): Promise<boolean> => {
  const tgId = ctx.from?.id;
  if (!tgId) {
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É (–Ω–µ—Ç tgId).', kb.main(false));
    await ctx.scene.leave();
    return false;
  }

  try {
    const stored = await profileService.save({
      tgId,
      name: state.name ?? '',
      location: state.location ?? '',
      intro: state.intro ?? '',
      catName: state.catName ?? '',
      catPhotoId: state.catPhotoId ?? ''
    });
    state.profileId = stored.id;
    await ctx.reply('–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:', {
      parse_mode: 'MarkdownV2',
      link_preview_options: { is_disabled: true }
    });
    await ctx.reply(templates.profilePreview(stored), {
      parse_mode: 'MarkdownV2',
      link_preview_options: { is_disabled: true }
    });
    await ctx.reply('–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', kb.postProfile());
    ctx.wizard.selectStep(FINAL_STEP_INDEX);
    return true;
  } catch (error) {
    await ctx.reply(error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.');
    return false;
  }
};

export const onboardingScene = new Scenes.WizardScene<RegistrationCtx>(
  'registration',
  async (ctx) => {
    await ctx.reply('–®–∞–≥ 1. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç.', kb.cancel());
    return ctx.wizard.next();
  },
  async (ctx) => {
    const state = ctx.wizard.state as RegistrationState;
    const text = getText(ctx);
    if (!text) return;
    if (text.toLowerCase() === CANCEL) {
      await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(false));
      return ctx.scene.leave();
    }
    state.name = text;
    await ctx.reply('–®–∞–≥ 2. –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É (–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –ò—Å–ø–∞–Ω–∏—è).', kb.cancel());
    return ctx.wizard.next();
  },
  async (ctx) => {
    const state = ctx.wizard.state as RegistrationState;
    const text = getText(ctx);
    if (!text) return;
    if (text.toLowerCase() === CANCEL) {
      await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(false));
      return ctx.scene.leave();
    }
    state.location = text;
    await ctx.reply(
      [
        '–®–∞–≥ 3. –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —Å–µ–±–µ:',
        '—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ —á—Ç–æ –ª—é–±–∏—à—å.'
      ].join('\n'),
      kb.cancel()
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    const state = ctx.wizard.state as RegistrationState;
    const text = getText(ctx);
    if (!text) return;
    if (text.toLowerCase() === CANCEL) {
      await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(false));
      return ctx.scene.leave();
    }
    state.intro = text;
    await ctx.reply(
      [
        '–®–∞–≥ 4. –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –∫–æ—Ç–∞.',
        '–í –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è, –∞ –µ—Å–ª–∏ –∫–æ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.'
      ].join('\n'),
      kb.cancel()
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    const state = ctx.wizard.state as RegistrationState;
    if (!('message' in ctx) || !ctx.message) return;
    if ('text' in ctx.message) {
      const text = ctx.message.text.trim().toLowerCase();
      if (text === CANCEL) {
        await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(false));
        return ctx.scene.leave();
      }
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞.', kb.cancel());
      return;
    }
    if (!('photo' in ctx.message) || !ctx.message.photo?.length) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞ –µ—â—ë —Ä–∞–∑.', kb.cancel());
      return;
    }

    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    state.catPhotoId = photo.file_id;
    const caption = ctx.message.caption?.trim();
    if (caption) {
      state.catName = caption;
      const saved = await saveProfileAndShowPreview(ctx, state);
      if (!saved) return resetToStart(ctx);
      return;
    }

    await ctx.reply('–ö–∞–∫ –∑–æ–≤—É—Ç –∫–æ—Ç–∞? –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.', kb.cancel());
    return ctx.wizard.next();
  },
  async (ctx) => {
    const state = ctx.wizard.state as RegistrationState;
    const text = getText(ctx);
    if (!text) return;
    if (text.toLowerCase() === CANCEL) {
      await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(false));
      return ctx.scene.leave();
    }
    if (!state.catPhotoId) {
      await ctx.reply('–ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ –∫–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.', kb.cancel());
      ctx.wizard.selectStep(4);
      return;
    }
    state.catName = text;
    const saved = await saveProfileAndShowPreview(ctx, state);
    if (!saved) return resetToStart(ctx);
  },
  async (ctx) => {
    const text = getText(ctx);
    if (!text) return;
    const lower = text.toLowerCase();
    if (lower === CANCEL) {
      await ctx.reply('–û–∫–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.', kb.main(true));
      return ctx.scene.leave();
    }

    const tgId = ctx.from?.id;
    if (!tgId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.', kb.main(true));
      return ctx.scene.leave();
    }

    const profile = await profileService.ensure(tgId);
    if (text === JOIN_CHAT) {
      const caption = templates.profilePreview(profile);
      const messageId = await publishService.publishProfile(ctx.telegram, profile, caption);
      await profileService.updateChannelMessage(tgId, messageId);
      await ctx.reply('–ì–æ—Ç–æ–≤–æ! –ú—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ —á–∞—Ç–µ.', kb.main(true));
      await ctx.reply(`–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —á–∞—Ç—É: ${cfg.channelInviteLink}`);
      return ctx.scene.leave();
    }

    if (text === CREATE_LISTING) {
      await ctx.reply('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é.', kb.cancel());
      return ctx.scene.enter('newListing');
    }

    if (text === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', kb.main(true));
      return;
    }

    if (text === EDIT_PROFILE) {
      await ctx.reply('–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É.', kb.cancel());
      return ctx.scene.reenter();
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.', kb.postProfile());
  }
);
